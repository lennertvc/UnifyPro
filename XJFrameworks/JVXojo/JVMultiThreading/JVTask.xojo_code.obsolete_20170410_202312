#tag Class
Protected Class JVTask
Inherits Thread
	#tag Event
		Sub Run()
		  pushOnEventQueue( New JVTaskEvent( JVTaskEvent.Types.begin ) )
		  
		  Try
		    RaiseEvent run
		  Catch exc As ThreadEndException
		    // FIXME: we probably want to make sure this isn't being sent because
		    // the app is quitting?
		    pushOnEventQueue( New JVTaskEvent( JVTaskEvent.Types.killed ) )
		    Raise exc
		  End Try
		  
		  pushOnEventQueue( New JVTaskEvent( JVTaskEvent.Types.finished ) )
		End Sub
	#tag EndEvent


	#tag Method, Flags = &h1000
		Sub Constructor(taskDelegate as JVTaskDelegate)
		  mLock = New CriticalSection
		  
		  mTimer = New Timer
		  AddHandler mTimer.Action, WeakAddressOf popFromEventQueue
		  
		  me.taskDelegate = taskDelegate
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Sub popFromEventQueue(sender as Timer)
		  // Takes the events in the queue and dispatches them to the correct event handler.
		  //
		  // NOTE: must be called from the main thread.
		  
		  While True
		    Dim currentEvent As JVTaskEvent
		    
		    mLock.Enter
		    If eventQueue.UBound >= 0 Then
		      currentEvent = eventQueue( 0 )
		      eventQueue.Remove( 0 )
		    Else
		      mLock.Leave
		      Exit Sub
		    End If
		    mLock.Leave
		    
		    Select Case currentEvent.type
		    Case JVTaskEvent.Types.begin
		      RaiseEvent begin
		    Case JVTaskEvent.Types.UpdateUI
		      RaiseEvent UpdateUI( currentEvent.Arguments )
		    Case JVTaskEvent.Types.finished
		      RaiseEvent finished
		    Case JVTaskEvent.Types.killed
		      RaiseEvent killed
		    End Select
		  Wend
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Sub pushOnEventQueue(evt as JVTaskEvent)
		  // Adds an event to the event queue. This can be called from any thread, but is
		  // usually called from the non-main thread.
		  
		  mLock.Enter
		  eventQueue.Append( evt )
		  mTimer.Period = 0
		  mTimer.Mode = Timer.ModeSingle
		  mLock.Leave
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub UpdateUI(args as Dictionary)
		  // Adds an UpdateUI event to the queue, which will eventually be dequeued
		  // by the timer (on the main thread) and raise the UpdateUI event.
		  
		  Dim evt As New JVTaskEvent( JVTaskEvent.Types.updateUI )
		  evt.Arguments = args
		  pushOnEventQueue( evt )
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub UpdateUI(paramarray args as Pair)
		  // Adds an UpdateUI event to the queue, which will eventually be dequeued
		  // on the main thread and raise the UpdateUI event.
		  //
		  // This specific method is a convenience function in order to be able to
		  // use Pair literals. For example:
		  //   UpdateUI( "progress": 10, "total_progress": 100 )
		  
		  Dim d As New Dictionary
		  For Each arg As Pair In args
		    d.Value( arg.Left ) = arg.Right
		  Next
		  
		  Self.UpdateUI( d )
		End Sub
	#tag EndMethod


	#tag Hook, Flags = &h0
		Event begin()
	#tag EndHook

	#tag Hook, Flags = &h0
		Event finished()
	#tag EndHook

	#tag Hook, Flags = &h0
		Event killed()
	#tag EndHook

	#tag Hook, Flags = &h0
		Event run()
	#tag EndHook

	#tag Hook, Flags = &h0
		Event UpdateUI(args as Dictionary)
	#tag EndHook


	#tag Property, Flags = &h21
		#tag Note
			The queue of pending events. This is protected by mLock in order to provide
			thread safety.
		#tag EndNote
		Private eventQueue() As JVTaskEvent
	#tag EndProperty

	#tag Property, Flags = &h21
		Private mLock As CriticalSection
	#tag EndProperty

	#tag Property, Flags = &h21
		Private mTaskDelegate As JVTaskDelegate
	#tag EndProperty

	#tag Property, Flags = &h21
		#tag Note
			This timer is used to punt events from the thread onto the main thread, where
			popFromEventQueue will process all of the queued events.
		#tag EndNote
		Private mTimer As Timer
	#tag EndProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  return mtaskDelegate
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  
			  if mtaskDelegate <> nil then
			    
			    // Remove any previously set delegate
			    RemoveHandler begin, AddressOf mtaskDelegate.onTaskBegin
			    RemoveHandler finished, AddressOf mtaskDelegate.onTaskFinished
			    RemoveHandler killed, AddressOf mtaskDelegate.onTaskKilled
			    RemoveHandler run, AddressOf mtaskDelegate.onTaskRun
			    RemoveHandler updateUI, AddressOf mtaskDelegate.onTaskUpdateUI
			    
			  end if
			  
			  // Set the delegate
			  mtaskDelegate = value
			  
			  if mtaskDelegate <> nil then
			    
			    // Redirect all events to the delegate
			    AddHandler begin, AddressOf mtaskDelegate.onTaskBegin
			    AddHandler finished, AddressOf mtaskDelegate.onTaskFinished
			    AddHandler killed, AddressOf mtaskDelegate.onTaskKilled
			    AddHandler run, AddressOf mtaskDelegate.onTaskRun
			    AddHandler updateUI, AddressOf mtaskDelegate.onTaskUpdateUI
			    
			  end if
			End Set
		#tag EndSetter
		taskDelegate As JVTaskDelegate
	#tag EndComputedProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			Type="Integer"
			EditorType="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
			EditorType="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Priority"
			Visible=true
			Group="Behavior"
			InitialValue="5"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="StackSize"
			Visible=true
			Group="Behavior"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
			EditorType="String"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
